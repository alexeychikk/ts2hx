import { type TransformerFn, type EmitFn } from './Transpiler';

import * as api from './api';
import * as lang from './lang';
import * as tr from './ts';

export * from './Transpiler';

export const TRANSFORMERS: TransformerFn[] = [
  tr.removeNonNullExpression,
  tr.removeNonNullAssertion,
  tr.transformDestructuredVariableDeclarationInCatch,
  tr.transformDestructuredVariableDeclarationInForOf,
  tr.transformMethodOnObject,
  tr.transformDestructuredParameterDeclaration,
  tr.transformPowExpression,
  tr.transformTemplateLiteralType,
  tr.transformMappedType,
  tr.transformKeyofTypeOperator,
  tr.transformTemplateExpression,
  tr.transformDeleteExpression,
  tr.addDefaultPublicModifier,
];

// Order here actually matters (to some extent)
export const EMITTERS: EmitFn[] = [
  api.transformJsApiAccess,
  api.transformJsIdentifiers,
  api.transformTsLibTypes,
  lang.transformJsDoc,
  lang.transformImportDeclaration,
  lang.transformVariableStatement,
  lang.transformVariableDeclarationList,
  lang.transformVariableDeclaration,
  lang.transformObjectBindingPattern,
  lang.transformArrayBindingPattern,
  lang.transformBooleanOperatorInVariableDeclaration,
  lang.transformClassDeclaration,
  lang.transformEnumDeclaration,
  lang.transformIndexedAccessType,
  lang.transformHeritageClause,
  lang.transformConstructor,
  lang.transformClassPropertyDeclaration,
  lang.transformClassMethodDeclaration,
  lang.transformClassGetter,
  lang.transformClassSetter,
  lang.transformForLoop,
  lang.transformForOfLoop,
  lang.transformForInLoop,
  lang.transformSwitchCase,
  lang.transformNotOperator,
  lang.transformInstanceOfExpression,
  lang.transformConditions,
  lang.transformObjectLiteralExpression,
  lang.transformPropertySignature,
  lang.transformIndexSignature,
  lang.transformMethodSignature,
  lang.transformConstructorSignature,
  lang.transformPropertyAssignment,
  lang.transformShorthandPropertyAssignment,
  lang.transformElementAccess,
  lang.transformElementWriteToObject,
  lang.transformGetSet,
  lang.transformArrowFunction,
  lang.transformFunctionParameter,
  lang.transformCallExpression,
  lang.transformVoidExpression,
  lang.transformAsExpression,
  lang.transformTypeofExpression,
  lang.transformTypeParameter,
  lang.transformConditionalType,
  lang.transformTypeQuery,
  lang.transformRegex,
  lang.transformSimpleTemplate,
  lang.transformTemplateExpression,
  lang.transformTemplateParts,
  lang.transformLiteralTypes,
  lang.transformArrayType,
  lang.transformUnionType,
  lang.transformTupleType,
  lang.transformKeywords,
  lang.transformRenameSymbol,
  lang.transformIdentifier,
];
